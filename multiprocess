from multiprocessing import Pool
from multiprocessing import Process, Queue, Lock
import os, time, random


def long_time_task(queue, name, lock):
    while True:
        lock.acquire()
        if not queue.empty():
            num = queue.get()
            print('task %s get %s' % (os.getpid(), num))
            lock.release()
        else:
            lock.release()
            break
    print('task %s done' % name)
    # while not queue.empty():
    #     # print('Run task %s (%s)...' % (name, os.getpid()))
    #     start = time.time()
    #     lock.acquire()
    #     num = queue.get()
    #     lock.release()
    #     print('task %s get %s' % (os.getpid(), num))
    #     end = time.time()
    #     # print('Task %s runs %0.2f seconds.' % (name, (end - start))
    # print('task %s done' % name)


if __name__ == '__main__':
    print('Parent process %s.' % os.getpid())
    que = Queue()
    mutex = Lock()

    for i in range(100):
        que.put(i)

    p_list = []

    for i in range(4):
        p_list.append(Process(target=long_time_task, args=(que, i, mutex)))

    for i in range(4):
        p_list[i].start()
    print('Waiting for all subprocesses done...')

    for i in range(4):
        p_list[i].join()
    print('All subprocesses done.')

    # for i in range(4):
    #     #     p_list[i].terminate()
